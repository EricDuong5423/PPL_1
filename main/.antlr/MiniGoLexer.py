# Generated from /Users/supreme3bye/Desktop/PPL_1/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,67,501,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,
        28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,
        33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,
        38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,
        43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,
        49,1,50,1,50,1,51,1,51,5,51,343,8,51,10,51,12,51,346,9,51,1,52,1,
        52,1,52,5,52,351,8,52,10,52,12,52,354,9,52,3,52,356,8,52,1,53,1,
        53,1,53,4,53,361,8,53,11,53,12,53,362,1,54,1,54,1,54,4,54,368,8,
        54,11,54,12,54,369,1,55,1,55,1,55,4,55,375,8,55,11,55,12,55,376,
        1,56,1,56,1,56,3,56,382,8,56,1,57,1,57,1,58,1,58,4,58,388,8,58,11,
        58,12,58,389,3,58,392,8,58,1,59,1,59,5,59,396,8,59,10,59,12,59,399,
        9,59,1,60,1,60,3,60,403,8,60,1,60,1,60,1,61,1,61,5,61,409,8,61,10,
        61,12,61,412,9,61,1,61,1,61,1,61,1,62,1,62,3,62,419,8,62,1,63,1,
        63,1,63,1,63,3,63,425,8,63,1,64,1,64,1,64,1,65,1,65,3,65,432,8,65,
        1,66,1,66,1,67,3,67,437,8,67,1,67,1,67,1,67,1,68,4,68,443,8,68,11,
        68,12,68,444,1,68,1,68,1,69,1,69,1,69,1,69,5,69,453,8,69,10,69,12,
        69,456,9,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,5,70,465,8,70,10,
        70,12,70,468,9,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,
        72,5,72,480,8,72,10,72,12,72,483,9,72,1,72,1,72,1,72,3,72,488,8,
        72,1,72,1,72,1,73,1,73,5,73,494,8,73,10,73,12,73,497,9,73,1,73,1,
        73,1,73,1,466,0,74,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,0,117,0,119,0,121,0,123,58,125,0,127,
        0,129,0,131,59,133,60,135,61,137,62,139,63,141,64,143,65,145,66,
        147,67,1,0,17,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,49,57,1,0,48,57,2,0,66,66,98,98,1,0,48,49,2,0,79,79,111,111,
        1,0,48,55,2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,69,69,101,
        101,2,0,43,43,45,45,3,0,10,10,34,34,92,92,5,0,34,34,92,92,110,110,
        114,114,116,116,3,0,9,9,12,13,32,32,1,0,10,10,1,1,10,10,516,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,
        111,1,0,0,0,0,113,1,0,0,0,0,123,1,0,0,0,0,131,1,0,0,0,0,133,1,0,
        0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,
        1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,1,149,1,0,0,0,3,152,1,0,0,0,
        5,157,1,0,0,0,7,161,1,0,0,0,9,168,1,0,0,0,11,173,1,0,0,0,13,178,
        1,0,0,0,15,185,1,0,0,0,17,195,1,0,0,0,19,202,1,0,0,0,21,206,1,0,
        0,0,23,212,1,0,0,0,25,220,1,0,0,0,27,226,1,0,0,0,29,230,1,0,0,0,
        31,239,1,0,0,0,33,245,1,0,0,0,35,251,1,0,0,0,37,255,1,0,0,0,39,260,
        1,0,0,0,41,266,1,0,0,0,43,268,1,0,0,0,45,270,1,0,0,0,47,272,1,0,
        0,0,49,274,1,0,0,0,51,276,1,0,0,0,53,279,1,0,0,0,55,282,1,0,0,0,
        57,284,1,0,0,0,59,287,1,0,0,0,61,289,1,0,0,0,63,292,1,0,0,0,65,295,
        1,0,0,0,67,298,1,0,0,0,69,300,1,0,0,0,71,302,1,0,0,0,73,305,1,0,
        0,0,75,308,1,0,0,0,77,311,1,0,0,0,79,314,1,0,0,0,81,317,1,0,0,0,
        83,319,1,0,0,0,85,321,1,0,0,0,87,323,1,0,0,0,89,325,1,0,0,0,91,328,
        1,0,0,0,93,330,1,0,0,0,95,332,1,0,0,0,97,334,1,0,0,0,99,336,1,0,
        0,0,101,338,1,0,0,0,103,340,1,0,0,0,105,355,1,0,0,0,107,357,1,0,
        0,0,109,364,1,0,0,0,111,371,1,0,0,0,113,378,1,0,0,0,115,383,1,0,
        0,0,117,391,1,0,0,0,119,393,1,0,0,0,121,400,1,0,0,0,123,406,1,0,
        0,0,125,418,1,0,0,0,127,424,1,0,0,0,129,426,1,0,0,0,131,431,1,0,
        0,0,133,433,1,0,0,0,135,436,1,0,0,0,137,442,1,0,0,0,139,448,1,0,
        0,0,141,459,1,0,0,0,143,474,1,0,0,0,145,477,1,0,0,0,147,491,1,0,
        0,0,149,150,5,105,0,0,150,151,5,102,0,0,151,2,1,0,0,0,152,153,5,
        101,0,0,153,154,5,108,0,0,154,155,5,115,0,0,155,156,5,101,0,0,156,
        4,1,0,0,0,157,158,5,102,0,0,158,159,5,111,0,0,159,160,5,114,0,0,
        160,6,1,0,0,0,161,162,5,114,0,0,162,163,5,101,0,0,163,164,5,116,
        0,0,164,165,5,117,0,0,165,166,5,114,0,0,166,167,5,110,0,0,167,8,
        1,0,0,0,168,169,5,102,0,0,169,170,5,117,0,0,170,171,5,110,0,0,171,
        172,5,99,0,0,172,10,1,0,0,0,173,174,5,116,0,0,174,175,5,121,0,0,
        175,176,5,112,0,0,176,177,5,101,0,0,177,12,1,0,0,0,178,179,5,115,
        0,0,179,180,5,116,0,0,180,181,5,114,0,0,181,182,5,117,0,0,182,183,
        5,99,0,0,183,184,5,116,0,0,184,14,1,0,0,0,185,186,5,105,0,0,186,
        187,5,110,0,0,187,188,5,116,0,0,188,189,5,101,0,0,189,190,5,114,
        0,0,190,191,5,102,0,0,191,192,5,97,0,0,192,193,5,99,0,0,193,194,
        5,101,0,0,194,16,1,0,0,0,195,196,5,115,0,0,196,197,5,116,0,0,197,
        198,5,114,0,0,198,199,5,105,0,0,199,200,5,110,0,0,200,201,5,103,
        0,0,201,18,1,0,0,0,202,203,5,105,0,0,203,204,5,110,0,0,204,205,5,
        116,0,0,205,20,1,0,0,0,206,207,5,102,0,0,207,208,5,108,0,0,208,209,
        5,111,0,0,209,210,5,97,0,0,210,211,5,116,0,0,211,22,1,0,0,0,212,
        213,5,98,0,0,213,214,5,111,0,0,214,215,5,111,0,0,215,216,5,108,0,
        0,216,217,5,101,0,0,217,218,5,97,0,0,218,219,5,110,0,0,219,24,1,
        0,0,0,220,221,5,99,0,0,221,222,5,111,0,0,222,223,5,110,0,0,223,224,
        5,115,0,0,224,225,5,116,0,0,225,26,1,0,0,0,226,227,5,118,0,0,227,
        228,5,97,0,0,228,229,5,114,0,0,229,28,1,0,0,0,230,231,5,99,0,0,231,
        232,5,111,0,0,232,233,5,110,0,0,233,234,5,116,0,0,234,235,5,105,
        0,0,235,236,5,110,0,0,236,237,5,117,0,0,237,238,5,101,0,0,238,30,
        1,0,0,0,239,240,5,98,0,0,240,241,5,114,0,0,241,242,5,101,0,0,242,
        243,5,97,0,0,243,244,5,107,0,0,244,32,1,0,0,0,245,246,5,114,0,0,
        246,247,5,97,0,0,247,248,5,110,0,0,248,249,5,103,0,0,249,250,5,101,
        0,0,250,34,1,0,0,0,251,252,5,110,0,0,252,253,5,105,0,0,253,254,5,
        108,0,0,254,36,1,0,0,0,255,256,5,116,0,0,256,257,5,114,0,0,257,258,
        5,117,0,0,258,259,5,101,0,0,259,38,1,0,0,0,260,261,5,102,0,0,261,
        262,5,97,0,0,262,263,5,108,0,0,263,264,5,115,0,0,264,265,5,101,0,
        0,265,40,1,0,0,0,266,267,5,43,0,0,267,42,1,0,0,0,268,269,5,45,0,
        0,269,44,1,0,0,0,270,271,5,42,0,0,271,46,1,0,0,0,272,273,5,47,0,
        0,273,48,1,0,0,0,274,275,5,37,0,0,275,50,1,0,0,0,276,277,5,61,0,
        0,277,278,5,61,0,0,278,52,1,0,0,0,279,280,5,33,0,0,280,281,5,61,
        0,0,281,54,1,0,0,0,282,283,5,60,0,0,283,56,1,0,0,0,284,285,5,60,
        0,0,285,286,5,61,0,0,286,58,1,0,0,0,287,288,5,62,0,0,288,60,1,0,
        0,0,289,290,5,62,0,0,290,291,5,61,0,0,291,62,1,0,0,0,292,293,5,38,
        0,0,293,294,5,38,0,0,294,64,1,0,0,0,295,296,5,124,0,0,296,297,5,
        124,0,0,297,66,1,0,0,0,298,299,5,33,0,0,299,68,1,0,0,0,300,301,5,
        61,0,0,301,70,1,0,0,0,302,303,5,43,0,0,303,304,5,61,0,0,304,72,1,
        0,0,0,305,306,5,45,0,0,306,307,5,61,0,0,307,74,1,0,0,0,308,309,5,
        42,0,0,309,310,5,61,0,0,310,76,1,0,0,0,311,312,5,47,0,0,312,313,
        5,61,0,0,313,78,1,0,0,0,314,315,5,37,0,0,315,316,5,61,0,0,316,80,
        1,0,0,0,317,318,5,46,0,0,318,82,1,0,0,0,319,320,5,58,0,0,320,84,
        1,0,0,0,321,322,5,44,0,0,322,86,1,0,0,0,323,324,5,59,0,0,324,88,
        1,0,0,0,325,326,5,58,0,0,326,327,5,61,0,0,327,90,1,0,0,0,328,329,
        5,40,0,0,329,92,1,0,0,0,330,331,5,41,0,0,331,94,1,0,0,0,332,333,
        5,123,0,0,333,96,1,0,0,0,334,335,5,125,0,0,335,98,1,0,0,0,336,337,
        5,91,0,0,337,100,1,0,0,0,338,339,5,93,0,0,339,102,1,0,0,0,340,344,
        7,0,0,0,341,343,7,1,0,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,
        1,0,0,0,344,345,1,0,0,0,345,104,1,0,0,0,346,344,1,0,0,0,347,356,
        5,48,0,0,348,352,7,2,0,0,349,351,7,3,0,0,350,349,1,0,0,0,351,354,
        1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,356,1,0,0,0,354,352,
        1,0,0,0,355,347,1,0,0,0,355,348,1,0,0,0,356,106,1,0,0,0,357,358,
        5,48,0,0,358,360,7,4,0,0,359,361,7,5,0,0,360,359,1,0,0,0,361,362,
        1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,108,1,0,0,0,364,365,
        5,48,0,0,365,367,7,6,0,0,366,368,7,7,0,0,367,366,1,0,0,0,368,369,
        1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,110,1,0,0,0,371,372,
        5,48,0,0,372,374,7,8,0,0,373,375,7,9,0,0,374,373,1,0,0,0,375,376,
        1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,112,1,0,0,0,378,379,
        3,117,58,0,379,381,3,119,59,0,380,382,3,121,60,0,381,380,1,0,0,0,
        381,382,1,0,0,0,382,114,1,0,0,0,383,384,7,3,0,0,384,116,1,0,0,0,
        385,392,5,48,0,0,386,388,3,115,57,0,387,386,1,0,0,0,388,389,1,0,
        0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,385,1,0,
        0,0,391,387,1,0,0,0,392,118,1,0,0,0,393,397,5,46,0,0,394,396,3,115,
        57,0,395,394,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,
        0,0,398,120,1,0,0,0,399,397,1,0,0,0,400,402,7,10,0,0,401,403,7,11,
        0,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,405,3,117,
        58,0,405,122,1,0,0,0,406,410,5,34,0,0,407,409,3,125,62,0,408,407,
        1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,413,
        1,0,0,0,412,410,1,0,0,0,413,414,5,34,0,0,414,415,6,61,0,0,415,124,
        1,0,0,0,416,419,8,12,0,0,417,419,3,127,63,0,418,416,1,0,0,0,418,
        417,1,0,0,0,419,126,1,0,0,0,420,421,5,92,0,0,421,425,7,13,0,0,422,
        423,5,39,0,0,423,425,5,34,0,0,424,420,1,0,0,0,424,422,1,0,0,0,425,
        128,1,0,0,0,426,427,5,92,0,0,427,428,8,13,0,0,428,130,1,0,0,0,429,
        432,3,37,18,0,430,432,3,39,19,0,431,429,1,0,0,0,431,430,1,0,0,0,
        432,132,1,0,0,0,433,434,3,35,17,0,434,134,1,0,0,0,435,437,5,13,0,
        0,436,435,1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,439,5,10,0,
        0,439,440,6,67,1,0,440,136,1,0,0,0,441,443,7,14,0,0,442,441,1,0,
        0,0,443,444,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,446,1,0,
        0,0,446,447,6,68,2,0,447,138,1,0,0,0,448,449,5,47,0,0,449,450,5,
        47,0,0,450,454,1,0,0,0,451,453,8,15,0,0,452,451,1,0,0,0,453,456,
        1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,
        1,0,0,0,457,458,6,69,2,0,458,140,1,0,0,0,459,460,5,47,0,0,460,461,
        5,42,0,0,461,466,1,0,0,0,462,465,3,141,70,0,463,465,9,0,0,0,464,
        462,1,0,0,0,464,463,1,0,0,0,465,468,1,0,0,0,466,467,1,0,0,0,466,
        464,1,0,0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,42,0,0,470,
        471,5,47,0,0,471,472,1,0,0,0,472,473,6,70,2,0,473,142,1,0,0,0,474,
        475,9,0,0,0,475,476,6,71,3,0,476,144,1,0,0,0,477,481,5,34,0,0,478,
        480,3,125,62,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,
        482,1,0,0,0,482,487,1,0,0,0,483,481,1,0,0,0,484,485,5,13,0,0,485,
        488,5,10,0,0,486,488,7,16,0,0,487,484,1,0,0,0,487,486,1,0,0,0,488,
        489,1,0,0,0,489,490,6,72,4,0,490,146,1,0,0,0,491,495,5,34,0,0,492,
        494,3,125,62,0,493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,
        496,1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,498,499,3,129,64,0,499,
        500,6,73,5,0,500,148,1,0,0,0,24,0,344,352,355,362,369,376,381,389,
        391,397,402,410,418,424,431,436,444,454,464,466,481,487,495,6,1,
        61,0,1,67,1,6,0,0,1,71,2,1,72,3,1,73,4
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EQUAL = 26
    NEQUAL = 27
    LT = 28
    LTE = 29
    GT = 30
    GTE = 31
    AND = 32
    OR = 33
    NOT = 34
    ASSIGN = 35
    ADD_ASSIGN = 36
    SUB_ASSIGN = 37
    MUL_ASSIGN = 38
    DIV_ASSIGN = 39
    MOD_ASSIGN = 40
    DOT = 41
    COLON = 42
    COMMA = 43
    COCOM = 44
    COLONEQUAL = 45
    LPAREN = 46
    RPAREN = 47
    LCPAREN = 48
    RCPAREN = 49
    LSPAREN = 50
    RSPAREN = 51
    ID = 52
    INT_LIT = 53
    BIN_LIT = 54
    OCT_LIT = 55
    HEX_LIT = 56
    FLOAT_LIT = 57
    STRING_LIT = 58
    BOOL_LIT = 59
    NIL_LIT = 60
    NEWLINE = 61
    WS = 62
    COMMENT_LINE = 63
    COMMENT = 64
    ERROR_CHAR = 65
    UNCLOSE_STRING = 66
    ILLEGAL_ESCAPE = 67

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "':'", 
            "','", "';'", "':='", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NEQUAL", "LT", "LTE", "GT", "GTE", "AND", 
            "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
            "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COLON", "COMMA", "COCOM", 
            "COLONEQUAL", "LPAREN", "RPAREN", "LCPAREN", "RCPAREN", "LSPAREN", 
            "RSPAREN", "ID", "INT_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", 
            "FLOAT_LIT", "STRING_LIT", "BOOL_LIT", "NIL_LIT", "NEWLINE", 
            "WS", "COMMENT_LINE", "COMMENT", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NEQUAL", 
                  "LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", "ASSIGN", 
                  "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "DOT", "COLON", "COMMA", "COCOM", "COLONEQUAL", 
                  "LPAREN", "RPAREN", "LCPAREN", "RCPAREN", "LSPAREN", "RSPAREN", 
                  "ID", "INT_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", "FLOAT_LIT", 
                  "DIGIT", "DIGITS", "FRAC", "EXP", "STRING_LIT", "STRING_CHAR", 
                  "ESC_SEQ", "ESC_ILLEGAL", "BOOL_LIT", "NIL_LIT", "NEWLINE", 
                  "WS", "COMMENT_LINE", "COMMENT", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
        self.preType = None

    def emit(self):
        tk = self.type
        self.preType = tk;
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.STRING_LIT_action 
            actions[67] = self.NEWLINE_action 
            actions[71] = self.ERROR_CHAR_action 
            actions[72] = self.UNCLOSE_STRING_action 
            actions[73] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

                if self.preType in [self.ID, self.INT_LIT, self.BIN_LIT, self.OCT_LIT, self.HEX_LIT, self.STRING_LIT, self.FLOAT_LIT,
                                    self.TRUE, self.FALSE, self.INT, self.FLOAT, self.STRING, self.BOOLEAN, self.NIL,
                                    self.RETURN, self.CONTINUE, self.BREAK,
                                    self.RPAREN, self.RCPAREN, self.RSPAREN]:
                    self.text = ";"
                    self.type = self.COCOM
                else:
                    self.skip()

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[:-2])
                elif(self.text[-1] == '\n') :
                    raise UncloseString(self.text[:-1])
                else:
                    raise UncloseString(self.text[:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                raise IllegalEscape(self.text[:])

     


